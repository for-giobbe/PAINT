species = ['vicia']

chunk = [str(x).zfill(2) for x in range(1,21)]

rule all:
	input:
		cds='assemblies/vicia/vicia.final.raw.transdecoder.cds',
		gff='assemblies/vicia/vicia.final.raw.transdecoder.gff3',
		pep='assemblies/vicia/vicia.final.raw.transdecoder.pep'
	shell:  'rm -f -r pipeliner* snakejob* *longest_isoform*'

rule longest_isoform:
        input:
              	 'assemblies/{species}/{species}.Trinity.fasta'
        output:
               	 'assemblies/{species}/{species}.longest_isoform.fasta'
        conda:   '../env/trinity.yaml'
        shell:   'perl /gpfs/home/projects/gen_red/cartella/env/paint/opt/trinity-2.8.5/util/misc/get_longest_isoform_seq_per_trinity_gene.pl {input} > {output}'

rule split_fasta:
	input:
		 rules.longest_isoform.output
	output:
                 expand('assemblies/{{species}}/{{species}}.longest_isoform.part-{chunk}.fasta', species = species, chunk = chunk)
	conda:   '../env/pyfasta.yaml'
	shell:   'fasta-splitter -n-parts 20 --out-dir assemblies/vicia/ {input}'

rule transdecoder_longorfs:
	input:
		 'assemblies/{species}/{species}.longest_isoform.part-{chunk}.fasta'
	output:
		 'assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir/longest_orfs.pep'
	params:
		 basename='assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir'
	conda:   '../env/transdecoder.yaml'
	shell:   'TransDecoder.LongOrfs -t {input} --output_dir {params.basename}'

rule hmmscan:
	input:
		 'assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir/longest_orfs.pep'
	output:
		 'assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir/{chunk}.pfam.domtblout'
	threads: 4
	conda:   '../env/hmmscan.yaml'
	shell:   'hmmscan --cpu {threads} --domtblout {output} dbs/pfam/Pfam-A.hmm {input}'

rule blastp:
	input:
		 'assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir/longest_orfs.pep'
	output:
		 'assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir/{chunk}.blastp.outfmt6'
	threads: 4
	conda:   '../env/blast.yaml'
	shell:   'blastp -query {input} -db dbs/swissprot/uniprot_sprot.fasta -max_target_seqs 1 -outfmt 6 -evalue 1e-5 -num_threads {threads} > {output}'

rule cp_chunk:
	input:
		 'assemblies/{species}/{species}.longest_isoform.part-{chunk}.fasta'
	output:
		 'assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir/{species}.longest_isoform.{chunk}.fasta'
	shell:   'cp {input} {output}'

rule transdecoder_predict:
	input:
		 assembly = rules.cp_chunk.output,
		 blast    = rules.blastp.output,
		 hmmscan  = rules.hmmscan.output
	output:
		 cds='assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir/{species}.longest_isoform.{chunk}.fasta.transdecoder.cds',
		 gff='assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir/{species}.longest_isoform.{chunk}.fasta.transdecoder.gff3',
		 pep='assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir/{species}.longest_isoform.{chunk}.fasta.transdecoder.pep'
	params:
		 basename='assemblies/{species}/{species}.longest_isoform.{chunk}.fasta.transdecoder_dir'
	conda:   '../env/transdecoder.yaml'
	shell:   'TransDecoder.Predict -t {input.assembly} --retain_pfam_hits {input.hmmscan} --retain_blastp_hits {input.blast} --single_best_only --output_dir {params.basename}'

rule merge_cds:
	input: 
		  expand('assemblies/{{species}}/{{species}}.longest_isoform.{chunk}.fasta.transdecoder_dir/{{species}}.longest_isoform.{chunk}.fasta.transdecoder.cds', chunk = chunk)
	output:
		  'assemblies/{species}/{species}.final.raw.transdecoder.cds'
	shell:    'cat {input} >> {output}'

rule merge_gff:
        input:                                                                            
              	  expand('assemblies/{{species}}/{{species}}.longest_isoform.{chunk}.fasta.transdecoder_dir/{{species}}.longest_isoform.{chunk}.fasta.transdecoder.gff3', chunk = chunk)
        output:
                  'assemblies/{species}/{species}.final.raw.transdecoder.gff3'
        shell:	  'cat {input} >> {output}'

rule merge_pep:
        input:
              	  expand('assemblies/{{species}}/{{species}}.longest_isoform.{chunk}.fasta.transdecoder_dir/{{species}}.longest_isoform.{chunk}.fasta.transdecoder.pep', chunk = chunk)
        output:
               	  'assemblies/{species}/{species}.final.raw.transdecoder.pep'
        shell:    'cat {input} >> {output}'

