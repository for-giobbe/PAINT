sample = ['CR_A_01_AD','CR_A_01_AD','CR_A_01_CT','CR_A_01_CT','CR_A_02_AD','CR_A_02_AD','CR_A_02_CT','CR_A_02_CT','CR_A_03_AD','CR_A_03_AD','CR_A_03_CT','CR_A_03_CT','CR_A_05_AD','CR_A_05_AD','CR_A_05_CT','CR_A_05_CT','CR_A_06_AD','CR_A_06_AD','CR_A_06_CT','CR_A_06_CT',
'CR_B_01_AD','CR_B_01_AD','CR_B_01_CT','CR_B_01_CT','CR_B_02_AD','CR_B_02_AD','CR_B_02_CT','CR_B_02_CT','CR_B_03_AD','CR_B_03_AD','CR_B_03_CT','CR_B_03_CT','CR_B_04_AD','CR_B_04_AD','CR_B_04_CT','CR_B_04_CT','CR_B_05_AD','CR_B_05_AD','CR_B_05_CT','CR_B_05_CT',
'CR_C_02_AD','CR_C_02_AD','CR_C_02_CT','CR_C_02_CT','CR_C_03_AD','CR_C_03_AD','CR_C_03_CT','CR_C_03_CT','CR_C_06_AD','CR_C_06_AD','CR_C_06_CT','CR_C_06_CT','CR_C_07_AD','CR_C_07_AD','CR_C_07_CT','CR_C_07_CT','CR_C_08_AD','CR_C_08_AD','CR_C_08_CT','CR_C_08_CT',
'CR_D_01_AD','CR_D_01_AD','CR_D_01_CT','CR_D_01_CT','CR_D_02_AD','CR_D_02_AD','CR_D_02_CT','CR_D_02_CT','CR_D_03_AD','CR_D_03_AD','CR_D_03_CT','CR_D_03_CT','CR_D_04_AD','CR_D_04_AD','CR_D_04_CT','CR_D_04_CT','CR_D_06_AD','CR_D_06_AD','CR_D_06_CT','CR_D_06_CT']

mate = ['1','2']

rule all:
	input:
		expand('reads/crema_ref/{sample}_filtered.{mate}_fastqc.html', sample = sample, mate = mate),
		expand('reads/crema_ref/{sample}_filtered.{mate}.gz', sample = sample, mate = mate)

rule trimmomatic:
        input:
              	l='reads/crema_ref/{sample}_1.fastq.gz',
		r='reads/crema_ref/{sample}_2.fastq.gz'
	output:
		l_P=temp('reads/crema_ref/{sample}_trimmed_1P'),
		r_P=temp('reads/crema_ref/{sample}_trimmed_2P'),
		l_U=temp('reads/crema_ref/{sample}_trimmed_1U'),
		r_U=temp('reads/crema_ref/{sample}_trimmed_2U')
	threads: 8
        conda:  '../env/trimmomatic.yaml'
        shell:  'trimmomatic PE {input.l} {input.r} {output.l_P} {output.l_U} {output.r_P} {output.r_U} -threads {threads} '
		'ILLUMINACLIP:/gpfs/home/projects/gen_red/cartella/env/paint/share/trimmomatic-0.39-2/adapters/TruSeq3-PE.fa:2:30:10:2:TRUE SLIDINGWINDOW:5:30 LEADING:5 TRAILING:5 MINLEN:99'

rule rm_rrna:
	input:
		l=rules.trimmomatic.output.l_P,  
		r=rules.trimmomatic.output.r_P
	params:
		basename='{sample}_filtered'
	output: 
		l_filtered=('reads/crema_ref/{sample}_filtered.1.gz'),
		r_filtered=('reads/crema_ref/{sample}_filtered.2.gz'),
		sam=temp('reads/crema_ref/{sample}_filtered.sam')
	conda:	'../env/bowtie2.yaml'
	threads: 8
	shell:	'bowtie2 -x dbs/filter/filter -1 {input.l} -2 {input.r} --un-conc-gz reads/crema_ref/{params.basename} -p {threads} '
		'-S reads/crema_ref/{params.basename}.sam 2>&1 | tee reads/crema_ref/{params.basename}.log'

rule fastqc:
	input:
		rules.rm_rrna.output.l_filtered, rules.rm_rrna.output.r_filtered
	output:
		'reads/crema_ref/{sample}_filtered.1_fastqc.html', 'reads/crema_ref/{sample}_filtered.2_fastqc.html'
	conda:	'../env/fastqc.yaml'
	shell:	'fastqc {input}'
